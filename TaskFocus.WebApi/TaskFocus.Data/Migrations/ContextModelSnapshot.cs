// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskFocus.Data;

#nullable disable

namespace TaskFocus.Data.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskFocus.Data.Entities.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LabelId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LabelId")
                        .IsUnique();

                    b.HasIndex("PriorityId")
                        .IsUnique();

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskFocus.Data.Entities.TaskManagerUserSettingsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("StrictModelEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("TaskManagerUserSettings");
                });

            modelBuilder.Entity("TaskFocus.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskFocus.Data.Entities.UserPriorityLevelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("TaskManagerUserSettingsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskManagerUserSettingsId");

                    b.ToTable("UserPriorityLevelEntity");
                });

            modelBuilder.Entity("TaskFocus.Data.Entities.UserTaskLabelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("TaskManagerUserSettingsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskManagerUserSettingsId");

                    b.ToTable("UserTaskLabelEntity");
                });

            modelBuilder.Entity("TaskFocus.Data.Entities.TaskEntity", b =>
                {
                    b.HasOne("TaskFocus.Data.Entities.UserTaskLabelEntity", "Label")
                        .WithOne()
                        .HasForeignKey("TaskFocus.Data.Entities.TaskEntity", "LabelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TaskFocus.Data.Entities.UserPriorityLevelEntity", "Priority")
                        .WithOne()
                        .HasForeignKey("TaskFocus.Data.Entities.TaskEntity", "PriorityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Label");

                    b.Navigation("Priority");
                });

            modelBuilder.Entity("TaskFocus.Data.Entities.TaskManagerUserSettingsEntity", b =>
                {
                    b.HasOne("TaskFocus.Data.Entities.UserEntity", null)
                        .WithOne("TaskManagerUserSettings")
                        .HasForeignKey("TaskFocus.Data.Entities.TaskManagerUserSettingsEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskFocus.Data.Entities.UserPriorityLevelEntity", b =>
                {
                    b.HasOne("TaskFocus.Data.Entities.TaskManagerUserSettingsEntity", null)
                        .WithMany("Priorities")
                        .HasForeignKey("TaskManagerUserSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskFocus.Data.Entities.UserTaskLabelEntity", b =>
                {
                    b.HasOne("TaskFocus.Data.Entities.TaskManagerUserSettingsEntity", null)
                        .WithMany("Labels")
                        .HasForeignKey("TaskManagerUserSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskFocus.Data.Entities.TaskManagerUserSettingsEntity", b =>
                {
                    b.Navigation("Labels");

                    b.Navigation("Priorities");
                });

            modelBuilder.Entity("TaskFocus.Data.Entities.UserEntity", b =>
                {
                    b.Navigation("TaskManagerUserSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
